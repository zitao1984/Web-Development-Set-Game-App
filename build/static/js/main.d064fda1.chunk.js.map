{"version":3,"sources":["data/data.js","redux/storeConstant.js","redux/actionConstants.js","redux/store.js","redux/actions.js","components/Navigation.js","components/Home.js","components/Rules.js","components/card/Card.js","components/card/Board.js","components/gameLevels/Easy.js","components/gameLevels/Medium.js","components/gameLevels/Hard.js","views/App.js","reportWebVitals.js","index.js"],"names":["option","shape","color","number","shading","combination","combinate","combinationEasy","data","comb","key","Object","keys","Math","floor","random","valueIndex","filter","pattern","easyMode","console","log","indexList","totalNumber","cardNumber","arr","length","r","indexOf","push","getResetByLevel","level","index","GAME_STATE","EASY","getThreeRandomCards","currentBoardCard","currentLevel","removeCard","i","extraCard","differenceAfterRemove","Array","fill","map","element","x","includes","list","getThreeMoreCards","boardCard","concat","getUserSelectedCard","currentUserSelect","newCardIndex","splice","replaceThreeSetCard","cardBoard","cardInSet","checkIfASet","selectCard","difficulty","cardSet","card0","card1","card2","check","isThereASet","isASet","j","k","isGameOver","gameIsOver","MEDIUM","HARD","INITIAL_STATE","userSelect","cardBeenSet","ADD_THREE_CARDS","RESET","USER_SELECT_CARDS","REPLACE_SET_CARD","SELECT_CARD_BE_ZERO","CHANGE_DIFFICULTY","createStore","state","action","type","payload","s","changeDifficultyLevel","newLevel","reset","store","getState","addThreeCard","currentBoard","selectCardBeZero","Navigation","dispatch","useDispatch","className","to","onClick","src","alt","Home","_onClick","Rules","Card","props","useSelector","fileName","classNameStr","cardIndex","patternList","createPatternList","userSelectCards","file","Board","checkOneSet","alert","replaceSetCard","patternIndex","disabled","Easy","Medium","isThereSetOnBoard","Hard","App","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d064fda1.chunk.js","sourcesContent":["// 1) COLOR: Each card is red, green, or blue.\n// 2) SYMBOL: Each card contains ovals, squiggles, or diamonds.\n// 3) NUMBER: Each card has one, two, or three symbols.\n// 4) SHADING: Each card is solid, open, or striped.\n\nimport combinate from \"combinate\";\nimport { GAME_STATE } from \"../redux/storeConstant\";\n\nconst option = {\n  shape: [\"oval\", \"squiggle\", \"diamond\"],\n  color: [\"red\", \"green\", \"blue\"],\n  number: [1, 2, 3],\n  shading: [\"solid\", \"open\", \"striped\"],\n};\n\n// export const combinationEasy = combinate(optionEasy);\nexport const combination = combinate(option);\n\nconst easyMode = (data, comb) => {\n  const key = Object.keys(data)[Math.floor(Math.random() * 4)];\n  const valueIndex = Math.floor(Math.random() * 3);\n  return comb.filter((pattern) => pattern[key] === data[key][valueIndex]);\n};\nexport const combinationEasy = easyMode(option, combination);\nconsole.log(combinationEasy);\n\nconst indexList = (totalNumber, cardNumber) => {\n  const arr = [];\n  while (arr.length < cardNumber) {\n    const r = Math.floor(Math.random() * totalNumber);\n    if (arr.indexOf(r) === -1) arr.push(r);\n  }\n  return arr;\n};\n\nexport const getResetByLevel = (level) => {\n  let index;\n  if (level === GAME_STATE.EASY) {\n    index = indexList(27, 12);\n  } else {\n    index = indexList(81, 12);\n  }\n  console.log(index);\n  return index;\n};\n\nconst getThreeRandomCards = (currentBoardCard, currentLevel, removeCard) => {\n  let i;\n  let extraCard = [];\n  if (currentLevel === GAME_STATE.EASY) {\n    const totalNumber = Array(27)\n      .fill()\n      .map((element, index) => index);\n    let difference = totalNumber.filter((x) => !currentBoardCard.includes(x));\n    let differenceAfterRemove = difference.filter(\n      (x) => !removeCard.includes(x)\n    );\n    const list = indexList(differenceAfterRemove.length, 3);\n    for (i = 0; i < 3; i++) {\n      extraCard.push(differenceAfterRemove[list[i]]);\n    }\n  } else {\n    const totalNumber = Array(81)\n      .fill()\n      .map((element, index) => index);\n    let difference = totalNumber.filter((x) => !currentBoardCard.includes(x));\n    let differenceAfterRemove = difference.filter(\n      (x) => !removeCard.includes(x)\n    );\n    const list = indexList(differenceAfterRemove.length, 3);\n    for (i = 0; i < 3; i++) {\n      extraCard.push(differenceAfterRemove[list[i]]);\n    }\n  }\n  return extraCard;\n};\n\nexport const getThreeMoreCards = (\n  currentBoardCard,\n  currentLevel,\n  removeCard\n) => {\n  let extraCard = getThreeRandomCards(\n    currentBoardCard,\n    currentLevel,\n    removeCard\n  );\n  // let extraCard = getThreeRandomCards(currentBoardCard,currentLevel)\n  const boardCard = currentBoardCard.concat(extraCard);\n  console.log(boardCard);\n  return boardCard;\n};\n\nexport const getUserSelectedCard = (currentUserSelect, newCardIndex) => {\n  if (currentUserSelect.includes(newCardIndex)) {\n    let index = currentUserSelect.indexOf(newCardIndex);\n    if (index !== -1) {\n      currentUserSelect.splice(index, 1);\n    }\n    return currentUserSelect;\n  }\n  if (currentUserSelect.length >= 3) {\n    return currentUserSelect;\n  } else {\n    currentUserSelect.push(newCardIndex);\n    return currentUserSelect;\n  }\n};\n\nexport const replaceThreeSetCard = (\n  currentUserSelect,\n  cardBoard,\n  cardInSet,\n  currentLevel\n) => {\n  let extraCard = getThreeRandomCards(cardBoard, currentLevel, cardInSet);\n  console.log(\"EXTRA \" + extraCard);\n  let boardCard = cardBoard.concat(extraCard);\n  boardCard = boardCard.filter((x) => !currentUserSelect.includes(x));\n\n  return boardCard;\n};\n\nexport const highlightCardByUser = (\n  currentCardIndex,\n  userSelect,\n  cardHighlight\n) => {\n  console.log(userSelect);\n  console.log(currentCardIndex);\n  console.log(userSelect.indexOf(currentCardIndex));\n  cardHighlight[userSelect.indexOf(currentCardIndex)] = true;\n  return cardHighlight;\n};\n\nexport const checkIfASet = (selectCard, difficulty) => {\n  let cardSet;\n  if (difficulty === GAME_STATE.EASY) {\n    cardSet = combinationEasy;\n  } else {\n    cardSet = combination;\n  }\n  const card0 = cardSet[selectCard[0]];\n  const card1 = cardSet[selectCard[1]];\n  const card2 = cardSet[selectCard[2]];\n  const check = [];\n  for (let i = 0; i < 4; i++) {\n    check[i] =\n      (card0[Object.keys(card0)[i]] === card1[Object.keys(card1)[i]] &&\n        card1[Object.keys(card1)[i]] === card2[Object.keys(card2)[i]] &&\n        card0[Object.keys(card0)[i]] === card2[Object.keys(card2)[i]]) ||\n      (card0[Object.keys(card0)[i]] !== card1[Object.keys(card1)[i]] &&\n        card1[Object.keys(card1)[i]] !== card2[Object.keys(card2)[i]] &&\n        card0[Object.keys(card0)[i]] !== card2[Object.keys(card2)[i]]);\n  }\n  return !check.includes(false);\n};\n\n// Find all possible 3-cards combinations from the array of cards currently shown on the board\n// This algorithm was modified from an example found here:\n// https://stackoverflow.com/questions/43241174/javascript-generating-all-combinations-of-elements-in-a-single-array-in-pairs\nexport const isThereASet = (currentBoardCard, currentLevel) => {\n  let isASet = false;\n  console.log(currentBoardCard);\n  for (let i = 0; i < currentBoardCard.length - 2; i++) {\n    for (let j = i + 1; j < currentBoardCard.length - 1; j++) {\n      for (let k = j + 1; k < currentBoardCard.length; k++) {\n        let comb = [];\n        comb.push(currentBoardCard[i]);\n        comb.push(currentBoardCard[j]);\n        comb.push(currentBoardCard[k]);\n        if (checkIfASet(comb, currentLevel)) {\n          console.log(\"There is a set on the board\");\n          console.log(comb);\n          isASet = true;\n          return isASet;\n        }\n      }\n    }\n  }\n  console.log(\"There is no possible set on the board\");\n  return isASet;\n};\n\nexport const isGameOver = (currentBoardCard, currentLevel) => {\n  let gameIsOver = false;\n  if (\n    !isThereASet(currentBoardCard, currentLevel) ||\n    currentBoardCard.length === 0\n  ) {\n    console.log(\"There is no possible set and the game may be over.\");\n    gameIsOver = true;\n  }\n  return gameIsOver;\n};\n","import { getResetByLevel } from \"../data/data\";\n\nexport const GAME_STATE = {\n  EASY: \"easy\",\n  MEDIUM: \"medium\",\n  HARD: \"hard\",\n};\n\nexport const INITIAL_STATE = {\n  difficulty: \"\",\n  cardBoard: getResetByLevel(GAME_STATE.EASY),\n  userSelect: [],\n  cardBeenSet: [],\n};\n","export const ADD_THREE_CARDS = \"ADD_THREE_CARDS\";\nexport const RESET = \"RESET\";\nexport const USER_SELECT_CARDS = \"USER_SELECT_CARDS\";\nexport const REPLACE_SET_CARD = \"REPLACE_SET_CARD\";\nexport const SELECT_CARD_BE_ZERO = \"SELECT_CARD_BE_ZERO\";\nexport const CHANGE_DIFFICULTY = \"CHANGE_DIFFICULTY\";\n","import { createStore } from \"redux\";\nimport { INITIAL_STATE } from \"./storeConstant\";\nimport {\n  ADD_THREE_CARDS,\n  RESET,\n  USER_SELECT_CARDS,\n  SELECT_CARD_BE_ZERO,\n  REPLACE_SET_CARD,\n  CHANGE_DIFFICULTY,\n} from \"./actionConstants\";\n\nconst rootReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case CHANGE_DIFFICULTY:\n      return {\n        ...state,\n        difficulty: action.payload.difficulty,\n      };\n\n    case ADD_THREE_CARDS:\n      return {\n        ...state,\n        cardBoard: action.payload.cardBoard,\n      };\n    case RESET:\n      return {\n        ...state,\n        cardBoard: action.payload.cardBoard,\n        cardBeenSet: action.payload.cardBeenSet,\n      };\n    case USER_SELECT_CARDS:\n      const s = {\n        ...state,\n        userSelect: [...action.payload.userSelect],\n      };\n      console.log(s);\n      return s;\n\n    case SELECT_CARD_BE_ZERO:\n      return {\n        ...state,\n        userSelect: [...action.payload.userSelect],\n      };\n\n    case REPLACE_SET_CARD:\n      return {\n        ...state,\n        cardBoard: action.payload.cardBoard,\n        cardBeenSet: action.payload.cardBeenSet,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default createStore(rootReducer);\n","import {\n  RESET,\n  ADD_THREE_CARDS,\n  USER_SELECT_CARDS,\n  REPLACE_SET_CARD,\n  SELECT_CARD_BE_ZERO,\n  CHANGE_DIFFICULTY,\n} from \"./actionConstants\";\nimport { GAME_STATE } from \"./storeConstant\";\nimport store from \"./store\";\nimport {\n  getResetByLevel,\n  getThreeMoreCards,\n  getUserSelectedCard,\n  replaceThreeSetCard,\n} from \"../data/data\";\n\nexport const changeDifficultyLevel = (newLevel) => {\n  return {\n    type: CHANGE_DIFFICULTY,\n    payload: {\n      difficulty: newLevel,\n    },\n  };\n};\n\nexport const reset = () => {\n  const currentLevel = store.getState().difficulty;\n  return {\n    type: RESET,\n    payload: {\n      cardBoard: getResetByLevel(currentLevel),\n      cardBeenSet: [],\n    },\n  };\n};\n\nexport const addThreeCard = () => {\n  const currentBoard = store.getState().cardBoard;\n  const currentLevel = store.getState().difficulty;\n  const currentUserSelect = store.getState().userSelect;\n  const cardBeenSet = store.getState().cardBeenSet;\n  const cardInSet = cardBeenSet.concat(currentUserSelect);\n  return {\n    type: ADD_THREE_CARDS,\n    payload: {\n      cardBoard: getThreeMoreCards(currentBoard, currentLevel, cardInSet),\n    },\n  };\n};\n\nexport const userSelectCards = (newCardIndex) => {\n  const currentUserSelect = store.getState().userSelect;\n  return {\n    type: USER_SELECT_CARDS,\n    payload: {\n      userSelect: getUserSelectedCard(currentUserSelect, newCardIndex),\n    },\n  };\n};\n\nexport const selectCardBeZero = () => {\n  return {\n    type: SELECT_CARD_BE_ZERO,\n    payload: {\n      userSelect: [],\n    },\n  };\n};\n\nexport const replaceSetCard = () => {\n  const currentUserSelect = store.getState().userSelect;\n  const cardBoard = store.getState().cardBoard;\n  const cardBeenSet = store.getState().cardBeenSet;\n  const cardInSet = cardBeenSet.concat(currentUserSelect);\n  const currentLevel = store.getState().difficulty;\n  console.log(\"cardboard \" + cardBoard);\n  console.log(\"CardInSet \" + cardInSet);\n  console.log(\"userselect \" + currentUserSelect);\n\n  if (\n    (currentLevel === GAME_STATE.EASY &&\n      cardInSet.length + cardBoard.length - currentUserSelect.length === 27) ||\n    (currentLevel !== GAME_STATE.EASY &&\n      cardInSet.length + cardBoard.length - currentUserSelect.length === 81)\n  ) {\n    return {\n      type: REPLACE_SET_CARD,\n      payload: {\n        cardBoard: cardBoard.filter((x) => !currentUserSelect.includes(x)),\n        cardBeenSet: cardInSet,\n      },\n    };\n  } else {\n    return {\n      type: REPLACE_SET_CARD,\n      payload: {\n        cardBoard: replaceThreeSetCard(\n          currentUserSelect,\n          cardBoard,\n          cardInSet,\n          currentLevel\n        ),\n        cardBeenSet: cardInSet,\n      },\n    };\n  }\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { selectCardBeZero } from \"../redux/actions\";\n\nconst Navigation = () => {\n  const dispatch = useDispatch();\n  return (\n    <div className=\"nav\">\n      <div className=\"row nav-row\">\n        <div className=\"col-sm col\">\n          <Link to=\"/\">\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              onClick={() => dispatch(selectCardBeZero())}\n            >\n              Home\n            </button>\n          </Link>\n        </div>\n        <div className=\"col-sm col\">\n          <img\n            className=\"nav-image\"\n            src=\"/images/set_cards.png\"\n            alt=\"Set Card\"\n          />\n        </div>\n        <div className=\"col-sm col\">\n          <Link to=\"/rules\">\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              onClick={() => dispatch(selectCardBeZero())}\n            >\n              Rules\n            </button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { changeDifficultyLevel, reset } from \"../redux/actions\";\nimport { GAME_STATE } from \"../redux/storeConstant\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n\n  const _onClick = (newLevel) => {\n    dispatch(changeDifficultyLevel(newLevel));\n    dispatch(reset());\n  };\n\n  return (\n    <div className=\"main-container\">\n      <div className=\"padding-10\">\n        <div>\n          <h2>Welcome!</h2>\n          <div>Choose a level of difficulty below to get started:</div>\n        </div>\n        <div className=\"padding-30\">\n          <div className=\"row\">\n            <div className=\"col-sm\" className=\"general-padding\">\n              <Link to=\"/easy\">\n                <button\n                  type=\"button\"\n                  className=\"btn btn-primary btn-lg\"\n                  onClick={() => _onClick(GAME_STATE.EASY)}\n                >\n                  Easy\n                </button>\n              </Link>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-sm\" className=\"general-padding\">\n              <Link to=\"/medium\">\n                <button\n                  type=\"button\"\n                  className=\"btn btn-primary btn-lg\"\n                  onClick={() => _onClick(GAME_STATE.MEDIUM)}\n                >\n                  Medium\n                </button>\n              </Link>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-sm\" className=\"general-padding\">\n              <Link to=\"/hard\">\n                <button\n                  type=\"button\"\n                  className=\"btn btn-primary btn-lg\"\n                  onClick={() => _onClick(GAME_STATE.HARD)}\n                >\n                  Hard\n                </button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\n\nconst Rules = () => {\n  return (\n    <div className=\"main-container\">\n      <div className=\"text-left\">\n        <div className=\"text-center\">\n          <h2>Rules</h2>\n        </div>\n        <p>\n          The object of the game is to identify a 'Set' of three cards from the\n          cards laid out on the screen. Each card has a variation of the\n          following four features:\n        </p>\n        <ol>\n          <li>COLOR: Each card is red, green, or blue.</li>\n          <li>SHAPE: Each card contains ovals, squiggles, or diamonds.</li>\n          <li>NUMBER: Each card has one, two, or three symbols.</li>\n          <li>SHADING: Each card is solid, open, or striped.</li>\n        </ol>\n        <p>\n          A 'Set' consists of three cards in which each feature is EITHER the\n          same on each card OR is different on each card. In other words, any\n          feature in the 'Set' of three cards is either common to all three\n          cards or is different on each card.\n        </p>\n        <div>\n          An example of a set is 3 cards with:\n          <ul>\n            <li>color: different on each card,</li>\n            <li>symbol: oval (the same on each card),</li>\n            <li>number: two (the same on each card),</li>\n            <li>shading: solid (the same on each card)</li>\n          </ul>\n          {/* 1) oval solid blue 2 oval solid blue 2 oval solid red 2 oval solid red\n          2 oval solid green 2 oval solid green 2 2) color: different on each\n          card, symbol: different on each card, number: different on each card,\n          shading: different on each card diamond striped blue 2 diamond striped\n          blue 2 squiggle solid red 1 oval open green 3 oval open green 3 oval\n          open green 3 3) color: the same on each card (green), symbol: the same\n          on each card (diamond), number: different on each card, shading:\n          different on each card diamond solid green 2 diamond solid green 2\n          diamond striped green 3 diamond striped green 3 diamond striped green\n          3 diamond open green 1 */}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Rules;\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { userSelectCards } from \"../../redux/actions\";\n\nconst Card = (props) => {\n  const userSelect = useSelector((state) => state.userSelect);\n  const dispatch = useDispatch();\n\n  const fileName =\n    props.shape + \"_\" + props.shading + \"_\" + props.color + \".png\";\n  const key =\n    props.shape + \"_\" + props.shading + \"_\" + props.color + \"_\" + props.number;\n\n  const createPatternList = () => {\n    const patternList = [];\n    for (let i = 0; i < props.number; i++) {\n      patternList.push(fileName);\n    }\n    return patternList;\n  };\n\n  let classNameStr = \"card-container\";\n  if (userSelect.includes(props.cardIndex)) {\n    classNameStr += \" highlighted\";\n  }\n\n  const patternList = createPatternList();\n\n  return (\n    <div\n      className={classNameStr}\n      onClick={() => dispatch(userSelectCards(props.cardIndex))}\n    >\n      {/*{console.log(\"here\")}*/}\n      <a>\n        {patternList.map((file, index) => (\n          <div>\n            <img src={\"/images/\" + file} alt={fileName} key={key} />\n          </div>\n        ))}\n      </a>\n    </div>\n  );\n};\n\nexport default Card;\n","import { combinationEasy, combination } from \"../../data/data\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { GAME_STATE } from \"../../redux/storeConstant\";\nimport Card from \"./Card\";\nimport { replaceSetCard, selectCardBeZero } from \"../../redux/actions\";\n\nconst Board = () => {\n  const cardBoard = useSelector((state) => state.cardBoard);\n  const difficulty = useSelector((state) => state.difficulty);\n  const userSelect = useSelector((state) => state.userSelect);\n  const dispatch = useDispatch();\n\n  const checkOneSet = (selectCard) => {\n    let cardSet;\n    if (difficulty === GAME_STATE.EASY) {\n      cardSet = combinationEasy;\n    } else {\n      cardSet = combination;\n    }\n    const card0 = cardSet[selectCard[0]];\n    const card1 = cardSet[selectCard[1]];\n    const card2 = cardSet[selectCard[2]];\n    const check = [];\n    for (let i = 0; i < 4; i++) {\n      check[i] =\n        (card0[Object.keys(card0)[i]] === card1[Object.keys(card1)[i]] &&\n          card1[Object.keys(card1)[i]] === card2[Object.keys(card2)[i]] &&\n          card0[Object.keys(card0)[i]] === card2[Object.keys(card2)[i]]) ||\n        (card0[Object.keys(card0)[i]] !== card1[Object.keys(card1)[i]] &&\n          card1[Object.keys(card1)[i]] !== card2[Object.keys(card2)[i]] &&\n          card0[Object.keys(card0)[i]] !== card2[Object.keys(card2)[i]]);\n    }\n    return !check.includes(false);\n  };\n\n  const check = () => {\n    if (userSelect.length === 3) {\n      const result = checkOneSet(userSelect);\n      if (result) {\n        alert(\"That's a set!\");\n        dispatch(replaceSetCard());\n      } else {\n        alert(\"That's not a set!\");\n      }\n      dispatch(selectCardBeZero());\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"board\">\n        <div className=\"board-container\">\n          {difficulty === GAME_STATE.EASY\n            ? cardBoard.map((patternIndex, index) => {\n                // const selected = userSelect.includes(patternIndex);\n                return (\n                  <div className=\"cards\">\n                    <Card\n                      shape={combinationEasy[patternIndex].shape}\n                      color={combinationEasy[patternIndex].color}\n                      shading={combinationEasy[patternIndex].shading}\n                      number={combinationEasy[patternIndex].number}\n                      cardIndex={patternIndex}\n                      cardSet={combinationEasy}\n                      // selected={selected}\n                    />\n                  </div>\n                );\n              })\n            : cardBoard.map((patternIndex, index) => {\n                // const selected = userSelect.includes(patternIndex);\n                return (\n                  <div className=\"cards\">\n                    <Card\n                      shape={combination[patternIndex].shape}\n                      color={combination[patternIndex].color}\n                      number={combination[patternIndex].number}\n                      shading={combination[patternIndex].shading}\n                      cardIndex={patternIndex}\n                      cardSet={combination}\n                      // selected={selected}\n                    />\n                  </div>\n                );\n              })}\n        </div>\n      </div>\n      <div className=\"d-grid gap-2 col-6 mx-auto\">\n        <button\n          className=\"btn btn-success\"\n          onClick={() => check()}\n          disabled={!(userSelect.length === 3)}\n        >\n          {\" \"}\n          Submit!\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","import Board from \"../card/Board\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  reset,\n  addThreeCard,\n  changeDifficultyLevel,\n} from \"../../redux/actions\";\nimport { GAME_STATE } from \"../../redux/storeConstant\";\nimport { isGameOver } from \"../../data/data\";\n\nconst Easy = (props) => {\n  const cardBoard = useSelector((state) => state.cardBoard);\n  const difficulty = useSelector((state) => state.difficulty);\n  const cardBeenSet = useSelector((state) => state.cardBeenSet);\n  const dispatch = useDispatch();\n\n  const checkLeftCardEasy = () => {\n    return cardBoard.length + cardBeenSet.length >= 27;\n  };\n\n  const check = checkLeftCardEasy();\n  console.log(check);\n\n  dispatch(changeDifficultyLevel(GAME_STATE.EASY));\n  console.log(\"This level is \" + difficulty);\n\n  return (\n    <div className=\"main-container\">\n      <div className=\"game\">\n        {/* Congratulations message appears if there is no more set in the remaining cards on the board */}\n        {isGameOver(cardBoard, difficulty) && cardBoard.length < 12 ? (\n          <div>\n            <h2>No more possible set.</h2>\n            <h1>Congratulations!</h1>\n          </div>\n        ) : (\n          <div className=\"board-space\">\n            <Board />\n          </div>\n        )}\n        <div>\n          <div className=\"row game-row\">\n            <div className=\" col-sm general-padding\">\n              <button\n                className=\"btn btn-danger btn-lg pad\"\n                onClick={() => dispatch(reset())}\n              >\n                Reset\n              </button>\n            </div>\n            <div className=\"col-sm general-padding\">\n              {cardBoard.length <= 18 ? (\n                <button\n                  className=\"btn btn-info btn-lg pad\"\n                  onClick={() => dispatch(addThreeCard())}\n                  disabled={check}\n                >\n                  Add 3 Cards\n                </button>\n              ) : (\n                \"\"\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Easy;\n","import Board from \"../card/Board\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  reset,\n  addThreeCard,\n  changeDifficultyLevel,\n} from \"../../redux/actions\";\nimport { GAME_STATE } from \"../../redux/storeConstant\";\nimport { isGameOver, isThereASet } from \"../../data/data\";\n\nconst Medium = (props) => {\n  const cardBoard = useSelector((state) => state.cardBoard);\n  const difficulty = useSelector((state) => state.difficulty);\n  const cardBeenSet = useSelector((state) => state.cardBeenSet);\n\n  const dispatch = useDispatch();\n\n  const checkLeftCardMedium = () => {\n    return cardBoard.length + cardBeenSet.length >= 81;\n  };\n\n  const check = checkLeftCardMedium();\n  console.log(check);\n\n  dispatch(changeDifficultyLevel(GAME_STATE.MEDIUM));\n  console.log(\"This level is \" + difficulty);\n\n  let isThereSetOnBoard = isThereASet(cardBoard, difficulty);\n  if (!isThereSetOnBoard && cardBoard.length >= 12) {\n    dispatch(addThreeCard());\n    console.log(\"3 cards have been added\");\n    isThereSetOnBoard = isThereASet(cardBoard, difficulty);\n  }\n\n  return (\n    <div className=\"main-container\">\n      <div className=\"game\">\n        {/* Create a Congratulations message if there is no more set in the remaining cards on the board */}\n        {isGameOver(cardBoard, difficulty) ? (\n          <div>\n            <h2>No more possible set.</h2>\n            <h1>Congratulations!</h1>\n          </div>\n        ) : (\n          <div className=\"board-space\">\n            <Board />\n          </div>\n        )}\n        <div>\n          <div className=\"row game-row\">\n            <div className=\"col-sm general-padding\">\n              <button\n                className=\"btn btn-danger btn-lg pad\"\n                onClick={() => dispatch(reset())}\n              >\n                Reset\n              </button>\n            </div>\n            <div className=\"col-sm general-padding\">\n              {cardBoard.length <= 18 ? (\n                <button\n                  className=\"btn btn-info btn-lg pad\"\n                  onClick={() => dispatch(addThreeCard())}\n                  disabled={check}\n                >\n                  Add 3 Cards\n                </button>\n              ) : (\n                \"\"\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Medium;\n","import Board from \"../card/Board\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  reset,\n  addThreeCard,\n  changeDifficultyLevel,\n} from \"../../redux/actions\";\nimport { GAME_STATE } from \"../../redux/storeConstant\";\nimport { isGameOver } from \"../../data/data\";\n\nconst Hard = (props) => {\n  const cardBoard = useSelector((state) => state.cardBoard);\n  const difficulty = useSelector((state) => state.difficulty);\n  const cardBeenSet = useSelector((state) => state.cardBeenSet);\n  const dispatch = useDispatch();\n\n  const checkLeftCardHard = () => {\n    return cardBoard.length + cardBeenSet.length >= 81;\n  };\n\n  const check = checkLeftCardHard();\n  console.log(check);\n\n  dispatch(changeDifficultyLevel(GAME_STATE.HARD));\n  console.log(\"This level is \" + difficulty);\n\n  return (\n    <div className=\"main-container\">\n      <div className=\"game\">\n        {/* Create a Congratulations message if there is no more set in the remaining cards on the board */}\n        {isGameOver(cardBoard, difficulty) && cardBoard.length < 12 ? (\n          <div>\n            <h2>No more possible set.</h2>\n            <h1>Congratulations!</h1>\n          </div>\n        ) : (\n          <div className=\"board-space\">\n            <Board />\n          </div>\n        )}\n        <div>\n          <div className=\"row game-row\">\n            <div className=\"col-sm general-padding\">\n              <button\n                className=\"btn btn-danger btn-lg pad\"\n                onClick={() => dispatch(reset())}\n              >\n                Reset\n              </button>\n            </div>\n            <div className=\"col-sm general-padding\">\n              {cardBoard.length <= 18 ? (\n                <button\n                  className=\"btn btn-info btn-lg pad\"\n                  onClick={() => dispatch(addThreeCard())}\n                  disabled={check}\n                >\n                  Add 3 Cards\n                </button>\n              ) : (\n                \"\"\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Hard;\n","import Navigation from \"../components/Navigation\";\nimport Home from \"../components/Home\";\nimport Rules from \"../components/Rules\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport \"../styles/styles.css\";\nimport \"../styles/CardStyles.css\";\nimport \"../styles/NavStyles.css\";\nimport Easy from \"../components/gameLevels/Easy\";\nimport Medium from \"../components/gameLevels/Medium\";\nimport Hard from \"../components/gameLevels/Hard\";\n\nconst App = () => (\n  <div className=\"main-layout\">\n    <BrowserRouter>\n      <Navigation />\n      <Switch>\n        <Route path=\"/\" component={Home} exact />\n        <Route path=\"/rules\" component={Rules} />\n        <Route path=\"/easy\" component={Easy} />\n        <Route path=\"/medium\" component={Medium} />\n        <Route path=\"/hard\" component={Hard} />\n      </Switch>\n    </BrowserRouter>\n  </div>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./styles/styles.css\";\nimport \"./styles/CardStyles.css\";\nimport \"./styles/NavStyles.css\";\nimport \"./styles/GameStyles.css\";\nimport \"./styles/BoardStyles.css\";\nimport store from \"./redux/store\";\nimport App from \"./views/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}